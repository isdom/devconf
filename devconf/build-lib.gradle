buildDir = "../public/${moduleName}"

ext {
    distBuildNumber = System.env.BUILD_NUMBER ? "${System.env.BUILD_NUMBER}" : "unknown"
    distBuildTimestamp = new java.text.SimpleDateFormat("yyyy-MM-dd_HH-mm-ss").format(new java.util.Date())
    Properties props = new Properties()
    props.load(new FileInputStream("${System.properties['user.home']}/ivysettings-file.properties"))
    userName = props['user.name']
    passWord = props['user.passwd']
    uploadUrlbase=props['upload.urlbase']
}

allprojects {
    if (!project.hasProperty('publishRelease') && !project.version.endsWith('-SNAPSHOT')) {
        project.version += '-SNAPSHOT'
    }
    
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    configurations {
        optional
        compile.extendsFrom optional
    }
    repositories {
        maven {
            url "http://repo.jocean.org/nexus/content/groups/public"
        }
        mavenCentral()
    }
    dependencies {
        components {
            all { details ->
                details.statusScheme = ["snapshot", "integration", "milestone", "release"]
            }
        }
    }
    sourceSets {
        main {
            resources {
                srcDirs 'src/main/resources', 'src/main/resource'
            }
        }
    }
    idea {
        module {
            excludeDirs = []
            [".idea", ".gradle", '.settings'].each {
                excludeDirs << file("$it")
            }
        }
    }
    eclipse {
        classpath {
           downloadSources = true
           downloadJavadoc = true
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.debug = "on"
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
}

tasks.withType(Javadoc) {
    options.encoding = "UTF-8"
    options.charSet = "UTF-8"
    options.addStringOption('Xdoclint:none', '-quiet')
}

task cleanAll {
    println "Clean project.."
    delete buildDir
}

/*
task init {
    doLast {
        println '+---------------------------------------------------+'
        println '|                                                   |'
        println "| B U I L D I N G $moduleName $version"
        println '|                                                   |'
        println '+---------------------------------------------------+'
    }   
}
*/

compileJava.dependsOn init

compileJava.doFirst {
    println 'Compile Java and copy resources'
}

jar {
    manifest {
        attributes("Specification-Title": moduleName, "Specification-Version": "$version-$distBuildNumber")
        attributes("Implementation-Title": moduleName, "Implementation-Version": "$version-$distBuildNumber-$distBuildTimestamp")
    }
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId     project.group
            artifactId  project.moduleName
            version     project.version
            
            //若是war包，就写components.web,若是jar包，就写components.java 
            from components.java
            
            artifact sourceJar {
                classifier 'sources'
            }
            artifact javadocJar {
                classifier 'javadoc'
            }
        }
    }
    repositories {
        maven {
            if (project.version.endsWith('-SNAPSHOT')) {
                url = uploadUrlbase+'/repositories/snapshots'
            } else {
                url = uploadUrlbase+'/repositories/releases'
            }
    
            credentials {
                username userName
                password passWord
            }
        }
    }
}