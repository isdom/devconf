apply plugin: 'maven'

buildDir = "../public/${moduleName}"

ext {
    distRevision = System.env.SVN_REVISION ? "${System.env.SVN_REVISION}" : "unformal"
    distBuildNumber = System.env.BUILD_NUMBER ? "${System.env.BUILD_NUMBER}" : "unknown"
    distBuildId = new java.text.SimpleDateFormat("yyyy-MM-dd_HH-mm-ss").format(new java.util.Date())
    //System.env.BUILD_ID ? "${System.env.BUILD_ID}" : System.currentTimeMillis()
    distPureFileName = "$moduleName-$version-$distBuildNumber-$distBuildId-scm-$distRevision"
    includeToBin = ((ext.has('includeToBin') ? includeToBin : []) << ['*.properties','logback.xml']).flatten()
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    configurations {
        optional
        compile.extendsFrom optional
    }
    repositories {
        maven {
            url "http://dev.jocean.org:8080/nexus/content/groups/public"
        }
        ivy {
            url "http://dev.jocean.org:8080/nexus/content/groups/public"
            layout "pattern", {
                artifact "[organisation]/[module]/[revision]/[artifact]-[revision].xml"
                artifact "[organisation]/[module]/[revision]/[artifact]-[revision](-[type]).[ext]"
                m2compatible = true
            }
        }
    }
    dependencies {
        components {
            all { details ->
                details.statusScheme = ["snapshot", "integration", "milestone", "release"]
            }
        }
    }
    sourceSets {
        main {
            resources {
                srcDirs 'src/main/resources', 'src/main/resource', 'scripts/logback'
            }
        }
    }
    idea {
        module {
            excludeDirs = []
            [".idea", ".gradle", '.settings'].each {
                excludeDirs << file("$it")
            }
        }
    }
    eclipse {
        classpath {
           downloadSources=true
           downloadJavadoc = true
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.debug = "on"
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
}

tasks.withType(Javadoc) {
    options.encoding = "UTF-8"
    options.charSet = "UTF-8"
}

task cleanAll << {
    println "Clean project.."
    delete buildDir
}

task init << {
    println '+---------------------------------------------------+'
    println '|                                                   |'
    println "| B U I L D I N G $moduleName $version"
    println '|                                                   |'
    println '+---------------------------------------------------+'
}

compileJava.dependsOn([init, cleanAll])

jar {
    manifest {
        from 'scripts/manifest/MANIFEST.MF'
        attributes("Specification-Title": moduleName, "Specification-Version": version)
        attributes("Implementation-Title": moduleName, "Implementation-Version": "$version-$distBuildNumber-$distBuildId-$distRevision")
    }
    exclude '*.properties'
    exclude 'logback*.xml'

    from({
        configurations.runtime.findAll { jar ->
            ['jocean-ext'].any { jar.name.startsWith(it) }
        }.collect {
            zipTree(it).matching{include '**/JOceanBooter.class', '**/JVMUtil.class'}
        }
    })

    includeEmptyDirs = false
    archiveName = "${moduleName}.jar"
}

task makeDist(dependsOn: [jar,javadoc], type: Zip) {
    into('bin') {
        from jar
        from(sourceSets.main.resources) {
            include includeToBin
            exclude '*-dev.properties'
        }
    }
    into('bin') {
        from "scripts/sh"
        fileMode 0755
    }
    into('bin/bsh') {
        from "scripts/bsh"
    }
    into('units') {
        from "units"
    }
    into('lib') {
        from configurations.runtime
    }
    from "$buildDir/${distPureFileName}.txt"
    archiveName = "${distPureFileName}.zip"
    destinationDir = rootDir
}

makeDist.doFirst {
    new File("$buildDir/${distPureFileName}.txt").text = 'distribution version'
    new File('.').eachFileMatch(~"$moduleName-.*\\.zip") { it.delete() }
}
